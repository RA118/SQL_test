{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "2024.9.248", "generated_at": "2024-09-26T08:16:39.394440Z", "invocation_id": "aae0a016-f094-4ce0-a52f-b49aa57e7891", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-26T08:16:39.177321Z", "completed_at": "2024-09-26T08:16:39.186531Z"}, {"name": "execute", "started_at": "2024-09-26T08:16:39.188277Z", "completed_at": "2024-09-26T08:16:39.188291Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05685997009277344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sql_test.avg_time_for_store_to_perform_five_transactions", "compiled": true, "compiled_code": "SELECT AVG(diff_hours) AS avg_time --overall avg\nFROM\n\t(SELECT \n\t-- here we calculate differences\n\t\tstore_id\n\t\t, store_name\n\t\t, MAX(happened_at) OVER (PARTITION BY store_id) AS fifth_transaction_time -- for presentation and qa purpose\n\t\t, MIN(happened_at) OVER (PARTITION BY store_id) AS first_transaction_time -- for presentation and qa purpose\n\t\t, DATETIME_DIFF(\n\t\t\t\tMAX(happened_at) OVER (PARTITION BY store_id) \n\t\t  , MIN(happened_at) OVER (PARTITION BY store_id)\n\t\t  , HOUR\n\t\t) AS diff_hours -- DATETIME_DIFF is BQ function, might be different in another DB\n\t\tFROM\n\t\t\t(SELECT\n\t\t\t-- here we count transactions per store\n\t\t\ts.id AS store_id,\n\t\t\ts.name AS store_name,\n\t\t\thappened_at,\n\t\t\tROW_NUMBER() OVER (PARTITION BY s.id ORDER BY happened_at ASC) AS nth_transaction,\n\t\t\tCOUNT(*) OVER (PARTITION BY s.id) AS max_transactions_per_store\n\n\t\t\tFROM sandbox.transactions t\n\t\t\tLEFT JOIN sandbox.device d ON t.device_id = d.id\n\t\t\tLEFT JOIN sandbox.store s ON d.store_id = s.id\n\n\t\t\tWHERE LOWER(status) = 'accepted'\n\t\t\t--AND DATE(t.happened_at) BETWEEEN DATETRUNC(TODAY(), month) AND TODAY()\n\t\t\tGROUP BY 1,2,3\n\t\t\t--ORDER BY 1,3 DESC;\n\t\t\t)\n\tWHERE max_transactions_per_store >=5 -- stores have 5 or more transactions\n\tAND nth_transaction = 1 OR nth_transaction = 5 -- we need 1st and 5th\n)", "relation_name": "`clean-wonder-435309-m2`.`dbt_ra118`.`avg_time_for_store_to_perform_five_transactions`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-26T08:16:39.182586Z", "completed_at": "2024-09-26T08:16:39.187062Z"}, {"name": "execute", "started_at": "2024-09-26T08:16:39.189497Z", "completed_at": "2024-09-26T08:16:39.189505Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.09565448760986328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sql_test.avg_transacted_amount_per_store_with_typology_and_country", "compiled": true, "compiled_code": "--Average transacted amount per store with typology and country\nSELECT\n\ns.country AS store_country,\ns.typology AS store_typology,\nAVG(t.amount) AS transacted_amount\n\nFROM sandbox.transactions t\nLEFT JOIN sandbox.device d ON t.device_id = d.id\nLEFT JOIN sandbox.store s ON d.store_id = s.id\n\nWHERE LOWER(status) = 'accepted'\n--AND DATE(t.happened_at) BETWEEEN DATETRUNC(TODAY(), month) AND TODAY() -- in real life there will be limitation\nGROUP BY 1,2", "relation_name": "`clean-wonder-435309-m2`.`dbt_ra118`.`avg_transacted_amount_per_store_with_typology_and_country`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-26T08:16:39.183658Z", "completed_at": "2024-09-26T08:16:39.187699Z"}, {"name": "execute", "started_at": "2024-09-26T08:16:39.189925Z", "completed_at": "2024-09-26T08:16:39.189933Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.13477015495300293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sql_test.percentage_of_transactions_per_device_type", "compiled": true, "compiled_code": "SELECT AVG(diff_hours) AS avg_time --overall avg\nFROM\n\t(SELECT \n\t-- here we calculate differences\n\t\tstore_id\n\t\t, store_name\n\t\t, MAX(happened_at) OVER (PARTITION BY store_id) AS fifth_transaction_time -- for presentation and qa purpose\n\t\t, MIN(happened_at) OVER (PARTITION BY store_id) AS first_transaction_time -- for presentation and qa purpose\n\t\t, DATETIME_DIFF(\n\t\t\t\tMAX(happened_at) OVER (PARTITION BY store_id) \n\t\t  , MIN(happened_at) OVER (PARTITION BY store_id)\n\t\t  , HOUR\n\t\t) AS diff_hours -- DATETIME_DIFF is BQ function, might be different in another DB\n\t\tFROM\n\t\t\t(SELECT\n\t\t\t-- here we count transactions per store\n\t\t\ts.id AS store_id,\n\t\t\ts.name AS store_name,\n\t\t\thappened_at,\n\t\t\tROW_NUMBER() OVER (PARTITION BY s.id ORDER BY happened_at ASC) AS nth_transaction,\n\t\t\tCOUNT(*) OVER (PARTITION BY s.id) AS max_transactions_per_store\n\n\t\t\tFROM sandbox.transactions t\n\t\t\tLEFT JOIN sandbox.device d ON t.device_id = d.id\n\t\t\tLEFT JOIN sandbox.store s ON d.store_id = s.id\n\n\t\t\tWHERE LOWER(status) = 'accepted'\n\t\t\t--AND DATE(t.happened_at) BETWEEEN DATETRUNC(TODAY(), month) AND TODAY()\n\t\t\tGROUP BY 1,2,3\n\t\t\t--ORDER BY 1,3 DESC;\n\t\t\t)\n\tWHERE max_transactions_per_store >=5 -- stores have 5 or more transactions\n\tAND nth_transaction = 1 OR nth_transaction = 5 -- we need 1st and 5th\n)", "relation_name": "`clean-wonder-435309-m2`.`dbt_ra118`.`percentage_of_transactions_per_device_type`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-26T08:16:39.184657Z", "completed_at": "2024-09-26T08:16:39.188678Z"}, {"name": "execute", "started_at": "2024-09-26T08:16:39.229799Z", "completed_at": "2024-09-26T08:16:39.229809Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.17608428001403809, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sql_test.top_ten_products_sold", "compiled": true, "compiled_code": "-- Top 10 products sold\nSELECT\nt.product_sku, -- added because different products might have same name\nt.product_name AS product_name,\nSUM(t.amount) AS transacted_amount\n\nFROM sandbox.transactions t\n--LEFT JOIN device d ON t.device_id = d.id -- don't need them here as all the fields are from t\n--LEFT JOIN store s ON d.store_id = s.id -- don't need them here as all the fields are from t\n\nWHERE LOWER(status) = 'accepted'\n--AND DATE(t.happened_at) BETWEEEN DATETRUNC(TODAY(), MONTH) AND TODAY() -- in real life there will be limitation\nGROUP BY 1,2\nORDER BY 3 DESC\nLIMIT 10", "relation_name": "`clean-wonder-435309-m2`.`dbt_ra118`.`top_ten_products_sold`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-26T08:16:39.185530Z", "completed_at": "2024-09-26T08:16:39.189102Z"}, {"name": "execute", "started_at": "2024-09-26T08:16:39.230272Z", "completed_at": "2024-09-26T08:16:39.230281Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.214829683303833, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sql_test.top_ten_stores_per_transacted_amount", "compiled": true, "compiled_code": "-- Top 10 stores per transacted amount\nSELECT\ns.id AS store_id, -- added because different stores might have same name\ns.name AS store_name,\nSUM(t.amount) AS transacted_amount\n\nFROM sandbox.transactions t\nLEFT JOIN sandbox.device d ON t.device_id = d.id\nLEFT JOIN sandbox.store s ON d.store_id = s.id\n\nWHERE LOWER(t.status) = 'accepted'\n--AND DATE(t.happened_at) BETWEEEN DATETRUNC(TODAY(), MONTH) AND TODAY() -- in real life there will be limitation\nGROUP BY 1,2 ORDER BY 3 DESC\nLIMIT 10", "relation_name": "`clean-wonder-435309-m2`.`dbt_ra118`.`top_ten_stores_per_transacted_amount`"}], "elapsed_time": 0.5303213596343994, "args": {"partial_parse": true, "populate_cache": true, "profiles_dir": "./", "log_path": "logs", "indirect_selection": "eager", "defer": false, "static_parser": true, "use_colors": true, "log_level": "info", "empty_catalog": false, "invocation_command": "dbt ", "target_path": "target", "use_colors_file": true, "vars": {}, "show_resource_report": false, "print": true, "source_freshness_run_project_hooks": false, "warn_error_options": {"include": [], "exclude": []}, "version_check": true, "favor_state": false, "log_level_file": "debug", "log_format_file": "json", "write_json": true, "send_anonymous_usage_stats": true, "quiet": false, "strict_mode": false, "require_explicit_package_overrides_for_builtin_materializations": true, "log_format": "json", "cache_selected_only": false, "exclude": [], "partial_parse_file_diff": true, "project_dir": "/app/dbt_project/f416c6a5-037f-4ad2-be8c-fd70481a44fb", "static": false, "which": "generate", "introspect": true, "log_file_max_bytes": 10485760, "profile": "user", "macro_debugging": false, "printer_width": 80, "require_resource_names_without_spaces": false, "select": [], "compile": true}}