{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "2024.9.252", "generated_at": "2024-09-28T15:56:40.566283Z", "invocation_id": "9667f5bb-08e0-48e4-a29d-2777e70a6af3", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-28T15:56:39.233689Z", "completed_at": "2024-09-28T15:56:39.238121Z"}, {"name": "execute", "started_at": "2024-09-28T15:56:39.249459Z", "completed_at": "2024-09-28T15:56:40.398647Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1808555126190186, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "clean-wonder-435309-m2", "job_id": "7f60ebb5-bb00-49c4-91c9-242da963750b", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.some_new_name.avg_transacted_amount_per_store_with_typology_and_country", "compiled": true, "compiled_code": "--Average transacted amount per store with typology and country\nSELECT\n\ns.country AS store_country,\ns.typology AS store_typology,\nAVG(t.amount) AS transacted_amount\n\nFROM sandbox.transactions t\nLEFT JOIN sandbox.device d ON t.device_id = d.id\nLEFT JOIN sandbox.store s ON d.store_id = s.id\n\nWHERE LOWER(status) = 'accepted'\n--AND DATE(t.happened_at) BETWEEEN DATETRUNC(TODAY(), month) AND TODAY() -- in real life there will be limitation\nGROUP BY 1,2", "relation_name": "`clean-wonder-435309-m2`.`dbt_ra118`.`avg_transacted_amount_per_store_with_typology_and_country`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-28T15:56:39.236556Z", "completed_at": "2024-09-28T15:56:39.259669Z"}, {"name": "execute", "started_at": "2024-09-28T15:56:39.273305Z", "completed_at": "2024-09-28T15:56:40.400214Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 1.1805505752563477, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "clean-wonder-435309-m2", "job_id": "1ea7cac6-b06d-49dd-bc98-7836dce2ed64", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.some_new_name.top_ten_stores_per_transacted_amount", "compiled": true, "compiled_code": "-- Top 10 stores per transacted amount\nSELECT\ns.id AS store_id, -- added because different stores might have same name\ns.name AS store_name,\nSUM(t.amount) AS transacted_amount\n\nFROM sandbox.transactions t\nLEFT JOIN sandbox.device d ON t.device_id = d.id\nLEFT JOIN sandbox.store s ON d.store_id = s.id\n\nWHERE LOWER(t.status) = 'accepted'\n--AND DATE(t.happened_at) BETWEEEN DATETRUNC(TODAY(), MONTH) AND TODAY() -- in real life there will be limitation\nGROUP BY 1,2 ORDER BY 3 DESC\nLIMIT 10", "relation_name": "`clean-wonder-435309-m2`.`dbt_ra118`.`top_ten_stores_per_transacted_amount`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-28T15:56:39.234657Z", "completed_at": "2024-09-28T15:56:39.238764Z"}, {"name": "execute", "started_at": "2024-09-28T15:56:39.271609Z", "completed_at": "2024-09-28T15:56:40.402793Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1828958988189697, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "clean-wonder-435309-m2", "job_id": "07b2e067-e791-4d94-8156-5fa465f6966c", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.some_new_name.percentage_of_transactions_per_device_type", "compiled": true, "compiled_code": "SELECT AVG(diff_hours) AS avg_time --overall avg\nFROM\n\t(SELECT \n\t-- here we calculate differences\n\t\tstore_id\n\t\t, store_name\n\t\t, MAX(happened_at) OVER (PARTITION BY store_id) AS fifth_transaction_time -- for presentation and qa purpose\n\t\t, MIN(happened_at) OVER (PARTITION BY store_id) AS first_transaction_time -- for presentation and qa purpose\n\t\t, DATETIME_DIFF(\n\t\t\t\tMAX(happened_at) OVER (PARTITION BY store_id) \n\t\t  , MIN(happened_at) OVER (PARTITION BY store_id)\n\t\t  , HOUR\n\t\t) AS diff_hours -- DATETIME_DIFF is BQ function, might be different in another DB\n\t\tFROM\n\t\t\t(SELECT\n\t\t\t-- here we count transactions per store\n\t\t\ts.id AS store_id,\n\t\t\ts.name AS store_name,\n\t\t\thappened_at,\n\t\t\tROW_NUMBER() OVER (PARTITION BY s.id ORDER BY happened_at ASC) AS nth_transaction,\n\t\t\tCOUNT(*) OVER (PARTITION BY s.id) AS max_transactions_per_store\n\n\t\t\tFROM sandbox.transactions t\n\t\t\tLEFT JOIN sandbox.device d ON t.device_id = d.id\n\t\t\tLEFT JOIN sandbox.store s ON d.store_id = s.id\n\n\t\t\tWHERE LOWER(status) = 'accepted'\n\t\t\t--AND DATE(t.happened_at) BETWEEEN DATETRUNC(TODAY(), month) AND TODAY()\n\t\t\tGROUP BY 1,2,3\n\t\t\t--ORDER BY 1,3 DESC;\n\t\t\t)\n\tWHERE max_transactions_per_store >=5 -- stores have 5 or more transactions\n\tAND nth_transaction = 1 OR nth_transaction = 5 -- we need 1st and 5th\n)", "relation_name": "`clean-wonder-435309-m2`.`dbt_ra118`.`percentage_of_transactions_per_device_type`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-28T15:56:39.235648Z", "completed_at": "2024-09-28T15:56:39.271161Z"}, {"name": "execute", "started_at": "2024-09-28T15:56:39.275838Z", "completed_at": "2024-09-28T15:56:40.404863Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1829235553741455, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "clean-wonder-435309-m2", "job_id": "f6002610-d6a3-4754-a934-fb97e1ba4405", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.some_new_name.top_ten_products_sold", "compiled": true, "compiled_code": "-- Top 10 products sold\nSELECT\nt.product_sku, -- added because different products might have same name\nt.product_name AS product_name,\nSUM(t.amount) AS transacted_amount\n\nFROM sandbox.transactions t\n--LEFT JOIN device d ON t.device_id = d.id -- don't need them here as all the fields are from t\n--LEFT JOIN store s ON d.store_id = s.id -- don't need them here as all the fields are from t\n\nWHERE LOWER(status) = 'accepted'\n--AND DATE(t.happened_at) BETWEEEN DATETRUNC(TODAY(), MONTH) AND TODAY() -- in real life there will be limitation\nGROUP BY 1,2\nORDER BY 3 DESC\nLIMIT 10", "relation_name": "`clean-wonder-435309-m2`.`dbt_ra118`.`top_ten_products_sold`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-28T15:56:39.227928Z", "completed_at": "2024-09-28T15:56:39.237433Z"}, {"name": "execute", "started_at": "2024-09-28T15:56:39.239254Z", "completed_at": "2024-09-28T15:56:40.510589Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2881922721862793, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "US", "project_id": "clean-wonder-435309-m2", "job_id": "b5a63017-52d3-4ebd-bcce-3432f2c5711f", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.some_new_name.avg_time_for_store_to_perform_five_transactions", "compiled": true, "compiled_code": "SELECT AVG(diff_hours) AS avg_time --overall avg\nFROM\n\t(SELECT \n\t-- here we calculate differences\n\t\tstore_id\n\t\t, store_name\n\t\t, MAX(happened_at) OVER (PARTITION BY store_id) AS fifth_transaction_time -- for presentation and qa purpose\n\t\t, MIN(happened_at) OVER (PARTITION BY store_id) AS first_transaction_time -- for presentation and qa purpose\n\t\t, DATETIME_DIFF(\n\t\t\t\tMAX(happened_at) OVER (PARTITION BY store_id) \n\t\t  , MIN(happened_at) OVER (PARTITION BY store_id)\n\t\t  , HOUR\n\t\t) AS diff_hours -- DATETIME_DIFF is BQ function, might be different in another DB\n\t\tFROM\n\t\t\t(SELECT\n\t\t\t-- here we count transactions per store\n\t\t\ts.id AS store_id,\n\t\t\ts.name AS store_name,\n\t\t\thappened_at,\n\t\t\tROW_NUMBER() OVER (PARTITION BY s.id ORDER BY happened_at ASC) AS nth_transaction,\n\t\t\tCOUNT(*) OVER (PARTITION BY s.id) AS max_transactions_per_store\n\n\t\t\tFROM sandbox.transactions t\n\t\t\tLEFT JOIN sandbox.device d ON t.device_id = d.id\n\t\t\tLEFT JOIN sandbox.store s ON d.store_id = s.id\n\n\t\t\tWHERE LOWER(status) = 'accepted'\n\t\t\t--AND DATE(t.happened_at) BETWEEEN DATETRUNC(TODAY(), month) AND TODAY()\n\t\t\tGROUP BY 1,2,3\n\t\t\t--ORDER BY 1,3 DESC;\n\t\t\t)\n\tWHERE max_transactions_per_store >=5 -- stores have 5 or more transactions\n\tAND nth_transaction = 1 OR nth_transaction = 5 -- we need 1st and 5th\n)", "relation_name": "`clean-wonder-435309-m2`.`dbt_ra118`.`avg_time_for_store_to_perform_five_transactions`"}], "elapsed_time": 1.895193338394165, "args": {"empty": false, "project_dir": "/usr/src/develop/user-70403103947377/environment-70403103961578/repository-70403103943939", "partial_parse_file_diff": true, "select": [], "indirect_selection": "eager", "vars": {}, "require_resource_names_without_spaces": false, "send_anonymous_usage_stats": true, "export_saved_queries": false, "source_freshness_run_project_hooks": false, "use_colors": true, "show": false, "exclude_resource_types": [], "invocation_command": "dbt -A dbt_worker.app worker --loglevel=DEBUG --concurrency=2 --max-memory-per-child=500000", "warn_error_options": {"include": [], "exclude": []}, "introspect": true, "include_saved_query": false, "profiles_dir": "/usr/src/dbt-server-shared/.dbt", "partial_parse": true, "resource_types": [], "which": "build", "use_colors_file": true, "log_format_file": "json", "write_json": true, "log_level": "info", "log_level_file": "debug", "profile": "user", "log_path": "/usr/src/dbt-server-shared/working_dir/e7569d34-d9e4-49a8-9c21-245f9f44f383", "show_resource_report": false, "require_explicit_package_overrides_for_builtin_materializations": true, "macro_debugging": false, "version_check": true, "favor_state": false, "log_format": "json", "printer_width": 80, "quiet": false, "strict_mode": false, "state": "/usr/src/dbt-server-shared/defer_state/run-70403122903711", "exclude": [], "populate_cache": true, "static_parser": true, "defer": true, "print": true, "cache_selected_only": false, "log_file_max_bytes": 0}}